-------- Relationships, Joins in SQL ---------------


--------- Relationships ------------

Since, MongoDB is a NoSQL DB, it can store any shape of data in it. 

like:

_id:2334049 
address: Object
    street : "abc"
    city : "delhi"
    country : "india"
    pincode : "99"
email : "abc@gmail.com"
name : "Vishnu"


But, in SQL DB, we can't store object like this, we need to have two differetn tables to store this data in.

By Relationships, we will create a address Table ,related to users table.

Keys:
Primary Key (PK): A unique identifier for each row in a table.
Foreign Key (FK): A column (or a set of columns) in one table that references the primary key in another table. 

Foreign keys gives this features:
Data Consistency: Prevents invalid data in the referencing table.
Cascading Actions: Enables automatic updates or deletions in the referencing table when a referenced record changes.


queries:

-- Users Table (Parent Table)
CREATE TABLE users(
    id SERIAL PRIMARY KEY,
    username VARCHAR(55) UNIQUE NOT NULL,
    email VARCHAR(255) UNIQUE NOT NULL,
    password VARCHAR(255) NOT NULL, 
    created_at TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP
);

-- User Addresses Table (Child Table)
CREATE TABLE addresses(
    id SERIAL PRIMARY KEY,
    user_id INTEGER NOT NULL,
    street VARCHAR(255) NOT NULL,
    city VARCHAR(100) NOT NULL,
    state VARCHAR(100) NOT NULL,
    pincode VARCHAR(20),
    country VARCHAR(100) DEFAULT 'INDIA',
    created_at TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP,
    FOREIGN KEY (user_id) REFERENCES users(id) 
        ON DELETE CASCADE 
        ON UPDATE CASCADE
);


------------ INSERT Query
INSERT INTO addresses (user_id, street, city, state, postal_code) 
VALUES (1, '123 Main St', 'Springfield', 'IL', '62704');



------------------------- JOINS ----------------------------

Defining Relationships is easy, what hard is Joining data from two (or more) tables together.

Q-1. For example, if i ask you to fetch me a users detail and their addresses, what SQL would you run? 

Solution 1: fetch users details, then another Query for users addresses. But this is bad approach, as it takes two Query.

Solution 2 : with Joins, good approach as only 1 Query for this question.
answer 2:

SELECT u.id, u.username, u.email, a.street, a.state, a.city, a.pincode, a.country
FROM users u
JOIN addresses a ON u.id = a.user_id
WHERE u.id = YOUR_USER_ID;


So, benifit of using joins is :
1. Reduced Latency
2. Simplified Application Logic
3. Transactional Integrity



------------- Some More deep things about join ------------------

The JOIN operation allows you to combine rows from two or more tables based on a related column between them.
Below are the main types of SQL joins:

------------- 1. INNER JOIN
What it does : The INNER JOIN returns only the rows that have matching values in both tables.
Use Case: Use this when you need to retrieve data that exists in both tables, i.e., matching records between the joined 
tables.

Example Query:
SELECT u.id, u.username, u.email, a.street, a.city, a.state, a.pincode, a.country
FROM users u
INNER JOIN addresses a ON u.id = a.user_id
WHERE u.id = 1;

Result: This query will return data from both the users and addresses tables where the id from the users table matches the 
user_id from the addresses table for the given id = 1.


------------ 2. LEFT JOIN (or LEFT OUTER JOIN)
What it does: The LEFT JOIN returns all the rows from the left table (first table) and the matching rows from the right 
table (second table). If there is no match, NULL values are returned for columns from the right table.

Use Case: Use this when you need all records from the left table, even if there is no corresponding match in the right 
table.

Example Query:
SELECT u.id, u.username, u.email, a.street, a.city, a.state, a.pincode, a.country
FROM users u
LEFT JOIN addresses a ON u.id = a.user_id
WHERE u.id = 1;

Result: This query will return all users (from the users table) and their associated address data from the addresses table. 
If a user has no address, NULL will be shown in the address-related columns.


------------- 3. RIGHT JOIN (or RIGHT OUTER JOIN)
What it does : The RIGHT JOIN returns all the rows from the right table (second table) and the matching rows from the left 
table (first table). If there is no match, NULL values are returned for columns from the left table.

Use Case: Use this when you need all records from the right table, even if there is no corresponding match in the left 
table.

Example Query:
SELECT u.id, u.username, u.email, a.street, a.city, a.state, a.pincode, a.country
FROM users u
RIGHT JOIN addresses a ON u.id = a.user_id
WHERE a.user_id = 1;

Result: This query will return all addresses (from the addresses table) and their associated user data from the users 
table. If an address has no matching user, NULL will be shown in the user-related columns.


-------------- 4. FULL OUTER JOIN
What it does : The FULL OUTER JOIN returns all rows when there is a match in one of the tables. It returns NULL for missing 
matches on either side.

Use Case: Use this when you want all records from both tables, regardless of whether there is a match.

Example Query:
SELECT u.id, u.username, u.email, a.street, a.city, a.state, a.pincode, a.country
FROM users u
FULL OUTER JOIN addresses a ON u.id = a.user_id;

Result: This query will return all users and all addresses, even if there is no corresponding match in the other table. 
Users without addresses or addresses without users will show NULL in the missing columns.


------------------ 5. CROSS JOIN
What it does: The CROSS JOIN returns the Cartesian product of the two tables, i.e., all possible combinations of rows from
both tables.

Use Case: Use this when you want to combine every row from one table with every row from another table (e.g., for 
generating combinations).

Example Query:
SELECT u.id, u.username, a.street
FROM users u
CROSS JOIN addresses a;

Result: This query will return all combinations of users and addresses (every user will be combined with every address).


------------------ 6. SELF JOIN
What it does : A SELF JOIN is a regular join but the table is joined with itself.

Use Case: Use this when you need to query data from the same table based on some relationship, often used for hierarchical 
data (e.g., employee-manager relationships).

Example Query:
SELECT e1.id, e1.username, e2.username AS manager
FROM users e1
LEFT JOIN users e2 ON e1.manager_id = e2.id;

Result: This query would return a list of employees along with their managerâ€™s name, assuming manager_id is a field in the 
users table.


------------------- Key Takeaways:
INNER JOIN: Returns only matching rows from both tables.
LEFT JOIN: Returns all rows from the left table and matched rows from the right table, with NULL for unmatched rows.
RIGHT JOIN: Returns all rows from the right table and matched rows from the left table, with NULL for unmatched rows.
FULL OUTER JOIN: Returns all rows from both tables, with NULL for unmatched rows.
CROSS JOIN: Returns the Cartesian product of both tables.
SELF JOIN: Joins a table with itself.