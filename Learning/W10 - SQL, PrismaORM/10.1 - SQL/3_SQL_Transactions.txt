In SQL, a **transaction** is a sequence of operations performed as a single unit of work. A transaction ensures 
that a series of database operations is executed in a way that maintains the **ACID** properties:

1. **Atomicity**: All operations in the transaction are completed; otherwise, none of them are applied.
2. **Consistency**: The database moves from one valid state to another.
3. **Isolation**: Transactions are executed independently of one another.
4. **Durability**: Once a transaction is committed, the changes are permanent.

### Common SQL Transaction Commands
- **`BEGIN TRANSACTION`**: Marks the start of a transaction.
- **`COMMIT`**: Saves all the changes made during the transaction.
- **`ROLLBACK`**: Reverts changes made during the transaction.


Can also be used when two queries like adding user and addresses at the same time.
---

### Basic Example

```
BEGIN TRANSACTION;

UPDATE accounts SET balance = balance - 100 WHERE account_id = 1;

UPDATE accounts SET balance = balance + 100 WHERE account_id = 2;

COMMIT;
```

If any operation in the transaction fails, you can **rollback** to undo all changes.

---

### Example with Error Handling

```
BEGIN TRANSACTION;

UPDATE accounts 
SET balance = balance - 100 
WHERE account_id = 1;

UPDATE accounts 
SET balance = balance + 100 
WHERE account_id = 2;

IF @@ERROR <> 0
BEGIN
    ROLLBACK; -- Undo all changes
    PRINT 'Transaction failed. Rolled back.';
END
ELSE
BEGIN
    COMMIT; -- Save all changes
    PRINT 'Transaction completed successfully.';
END
```

---

### Auto-Commit vs Manual Transactions
- By default, SQL databases like MySQL run in **auto-commit mode**, meaning each individual SQL statement is treated as a transaction and is automatically committed.
- To manually control transactions, disable auto-commit mode:
  ```sql
  SET autocommit = 0; -- Disable auto-commit
  BEGIN;
  -- SQL operations here
  COMMIT; -- Save changes
  ```