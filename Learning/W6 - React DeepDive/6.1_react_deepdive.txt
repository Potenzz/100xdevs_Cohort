6.1 is about - 

React Returns,
Re-Rendering,
React Memo 
key,
Wrapper Components,



------------------------------------ React Returns -- on app_1 project.


You Have to return in a single parent for multiple childerns:

function App() {

  return <div>
    <Header title="Vishnu here"></Header>
    <Header title="Vishnu here2"></Header>
  </div>
}




We can also return it like this:

return <>
    <Header title="Vishnu here"></Header>
    <Header title="Vishnu here2"></Header>
  </>

return <React.Fragment>
    <Header title="Vishnu here"></Header>
    <Header title="Vishnu here2"></Header>
  </React.Fragment>

both does similar thing.




---------------------------------- Re-Rendering -- 

This below code, re-renders all the childern, ideally it should re render only those things which are chagned.
It is happening because the useState variable is defined under the app func - A Parent Div, and whenever
the changes happens in setTitle, The Parent Div also gets re-renders causing every other element to be re-renderd.

So to overcome that, we need to push the State variables down to the Components.See the other set of code.


--- #1
function App() {

  const [title, setTitle] = useState("The num is 0")

  function updateState(){
    setTitle("The num is "+Math.random());
  };

  return <div>
    <button onClick={updateState}>Change the number</button>
    <Header title={title}></Header>
    <Header title="Vishnu here2"></Header>
    <Header title="Vishnu here2"></Header>
  </div>
}

function Header({title}){
  return <div>
    {title}
  </div>
}


--- #2

function App() {
  return <div>
    <HeaderWithButton/>
    <Header title="Vishnu here2"></Header>
    <Header title="Vishnu here2"></Header>
    <Header title="Vishnu here2"></Header>
    <Header title="Vishnu here2"></Header>
    <Header title="Vishnu here2"></Header>
  </div>
}

function HeaderWithButton(){
  const [title, setTitle] = useState("The num is 0")

  function updateState(){
    setTitle("The num is "+Math.random());
  };
  return <div>
  <button onClick={updateState}>Change the number</button>
  <Header title={title}></Header>
  </div>
}

function Header({title}){
  return <div>
    {title}
  </div>
}






--------------------- React Memo - 

It only re-renders the component if its props change.
Means, instead of #2 approach of above mentioned, we can use React.memo.

Its code :

function App() {
  const [title, setTitle] = useState("The num is 0")

  function updateState(){
    setTitle("The num is "+Math.random());
  };

  return <div>
    <button onClick={updateState}>Change the number</button>
    <Header title={title}></Header>
    <Header title="Vishnu here2"></Header>
    <Header title="Vishnu here2"></Header>
  </div>
}

const Header = React.memo(function Header({title}){
  return <div>
    {title}
  </div>
});




---------------------------------------- Key --

In React, the key prop is a special attribute that helps React efficiently update and manage lists of elements.
It is used internally by React to identify which items have changed, been added, or removed,
allowing React to re-render the appropriate parts of the UI rather than the entire list.


code:

var globalId = 4;

function App() {
  const [todos, setTodos] = useState([
    {
      id:1,
      title : "go to gym",
      description : "in morning"
    },
    {
      id:2,
      title : "go to temple",
      description : "after workout"
    },
    {
      id:3,
      title : "go to work",
      description : "usual things."
    },
  ])

  function addTodo(){
    setTodos([...todos, {
      id:globalId++,
      title:Math.random,
      description:Math.random
    }])

  }
  return <div>
    {todos.map(todo => <TodoComponent key={todo.id} title={todo.title} description={todo.description}></TodoComponent>)}
  </div>
}

function TodoComponent({title, description}){
  return <div>
    <h1>{title}</h1>
    <h5>{description}</h5>
  </div>
}





----------------------- Wrapper Components --



#1 - way

function App() {
  return <CardWrapper innercomponent={<TextComponent/>}></CardWrapper>
}

function TextComponent(){
  return <div>
    hi there
  </div>
}

function CardWrapper({innercomponent}){
  return <div style={{border:'2px solid black'}}  >
    {innercomponent}
  </div>
}




#2 - Clean way 

function App() {
  return <CardWrapper>
    Hi there
  </CardWrapper>
}


function CardWrapper({children}){
  return <div style={{border:'2px solid black'}}  >
    {children}
  </div>
}
