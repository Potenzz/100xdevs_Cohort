Storybook is an open-source tool for developing and testing UI components in isolation. It allows developers to build,
showcase, and test React (or other frameworks) components independently of the main application. Storybook helps ensure 
components work correctly, enables visual testing, and fosters better collaboration between developers and designers.


In my words, To make a story board of your UI components, to your team or other devs.


Go to official docs, to install it, (with Vite in our case)

Following our case (with Vite):

After commands:
npx storybook@latest init
npm install --save-dev @storybook/react-vite


It will creat a .storybook folder, which has two fils, main.js and preview.js

main.js code:

/** @type { import('@storybook/react-vite').StorybookConfig } */
const config = {
  stories: ["../src/**/*.mdx", "../src/**/*.stories.@(js|jsx|mjs|ts|tsx)"],
  addons: [
    "@storybook/addon-onboarding",
    "@storybook/addon-links",
    "@storybook/addon-essentials",
    "@chromatic-com/storybook",
    "@storybook/addon-interactions",
  ],
  framework: {
    name: "@storybook/react-vite",
    options: {},
  },
};
export default config;




You can see, it has given few paths, like inside src folder, if any file ends wih .stories.jsx,
it will work with them only.


In stories/components/RevenueCard.stories.jsx file we will write code like this:

// RevenueCard.stories.jsx
import RevenueCard from './RevenueCard'; // Adjust the path if needed

export default {
  title: 'Components/RevenueCard', // Story title in Storybook UI
  component: RevenueCard,            // Link to your component
};

const Template = (args) => <RevenueCard {...args} />;

// Define different versions (stories) of the component

export const Default = Template.bind({});
Default.args = {
  title: 'Total Revenue',
  orderCount: 0,
  amount: 50000,
};

export const WithOrders = Template.bind({});
WithOrders.args = {
  title: 'Total Revenue',
  orderCount: 5,
  amount: 75000,
};






//RevenueCard.jsx code:

export const RevenueCard = ({
    title,
    orderCount,
    amount
}) => {
    return <div className="bg-white rounded shadow-md p-8 ">
        <div className="flex">
            <div>
                {title}
            </div>
            <div className="pt-1 pl-1">
            <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor" class="size-4">
                <path stroke-linecap="round" stroke-linejoin="round" d="M9.879 7.519c1.171-1.025 3.071-1.025 4.242 0 1.172 1.025 1.172 2.687 0 3.712-.203.179-.43.326-.67.442-.745.361-1.45.999-1.45 1.827v.75M21 12a9 9 0 1 1-18 0 9 9 0 0 1 18 0Zm-9 5.25h.008v.008H12v-.008Z" />
            </svg>
            </div>
        </div>

        <div className="flex justify-between">
            <div className="font-semibold text-2xl"> â‚¹ {amount}</div>
            {orderCount ?
                <div className="flex justify-between text-blue-600 cursor-pointer underline font-medium	">
                    <div>
                        {orderCount} Order(s)
                    </div>

                    <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor" class="size-6">
                        <path stroke-linecap="round" stroke-linejoin="round" d="m8.25 4.5 7.5 7.5-7.5 7.5" />
                    </svg>
                </div>
                : null}

        </div>
    </div>
}